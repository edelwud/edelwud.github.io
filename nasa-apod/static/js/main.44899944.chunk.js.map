{"version":3,"sources":["constatnts/nasa.tsx","services/nasaService.ts","components/ImageAPOD.tsx","components/InfoComponent.tsx","components/ChangeImageForm.tsx","components/AlertDismissable.tsx","pages/MainPage.tsx","pages/PicturesPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getAPODImage","hdResolution","a","axios","get","config","data","date","Date","getRecentAPODImage","dateStringify","moment","format","imageUpdate","apodDay","localStorage","getItem","ImageAPOD","image","RenderFragment","media_type","title","width","height","src","url","frameBorder","className","allow","allowFullScreen","Figure","Image","fluid","Caption","explanation","InfoComponent","ChangeImageForm","updateAPODImage","setError","Form","Group","controlId","Label","Control","type","onChange","event","target","value","occurred","setItem","prevState","defaultValue","storedDate","getDateTimeValue","placeholder","Text","AlertDismissible","error","Alert","variant","onClose","dismissible","Heading","MainPage","useState","hdurl","service_version","setImage","needUpdate","update","useEffect","loadImage","then","catch","result","toString","Container","Row","Col","sm","to","PicturesList","imagesList","images","map","Card","Img","Body","Title","PicturesPage","pictures","setPictures","dates","Array","fill","index","subtract","push","Promise","all","loadPictures","Button","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.44899944.chunk.js","sourcesContent":["export default {\r\n\tHOST: \"https://api.nasa.gov/planetary/apod\",\r\n\tKEY: \"xuAZaAMWL68ZLMaN6gvhdHBPeCDcDeAR1nzDd1Wb\",\r\n\tERROR_IMAGE: \"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/12/1450973046wordpress-errors.png\"\r\n};\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nimport config from \"../constatnts/nasa\";\r\nimport ImageFormat from \"../models/ImageFormat\";\r\n\r\nexport async function getAPODImage(hdResolution: boolean): Promise<ImageFormat> {\r\n\tconst { data } = await axios.get(`${config.HOST}?api_key=${config.KEY}&hd=${hdResolution}`);\r\n\tdata.date = new Date(data.date);\r\n\treturn data;\r\n}\r\n\r\nexport async function getRecentAPODImage(date: Date, hdResolution: boolean): Promise<ImageFormat> {\r\n\tconst dateStringify = moment(date).format(\"YYYY-MM-DD\");\r\n\tconst { data } = await axios.get(`${config.HOST}?api_key=${config.KEY}&date=${dateStringify}&hd=${hdResolution}`);\r\n\tdata.date = new Date(data.date);\r\n\treturn data;\r\n}\r\n\r\nexport async function loadImage(imageUpdate: React.Dispatch<ImageFormat>) {\r\n\tconst apodDay = localStorage.getItem(\"apod_day\");\r\n\tapodDay ?\r\n\t\timageUpdate(await getRecentAPODImage(new Date(apodDay), false)) :\r\n\t\timageUpdate(await getAPODImage(false));\r\n}\r\n","import Figure from \"react-bootstrap/Figure\";\r\nimport React from \"react\";\r\n\r\nimport ImageFormat from \"../models/ImageFormat\";\r\n\r\ntype ImageAPODProps = {\r\n\timage: ImageFormat;\r\n}\r\n\r\nexport default function ImageAPOD({ image }: ImageAPODProps) {\r\n\tfunction RenderFragment() {\r\n\t\treturn image.media_type === \"video\" ?\r\n\t\t\t<iframe\r\n\t\t\t\ttitle={image.title}\r\n\t\t\t\twidth=\"560\"\r\n\t\t\t\theight=\"315\"\r\n\t\t\t\tsrc={image.url}\r\n\t\t\t\tframeBorder=\"0\"\r\n\t\t\t\tclassName=\"figure__apod_image\"\r\n\t\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n\t\t\t\tallowFullScreen\r\n\t\t\t/> :\r\n\t\t\t<Figure.Image className=\"figure__apod_image\" src={image.url} fluid />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Figure>\r\n\t\t\t<Figure.Caption>\r\n\t\t\t\t<h1 className=\"pictures__topic pt-3\">{ image.title }</h1>\r\n\t\t\t</Figure.Caption>\r\n\t\t\t<RenderFragment />\r\n\t\t\t<Figure.Caption>\r\n\t\t\t\t<p>{ image.explanation }</p>\r\n\t\t\t</Figure.Caption>\r\n\t\t</Figure>\r\n\t);\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function InfoComponent() {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>APOD</h1>\r\n\t\t\t<p>One of the most popular websites at NASA is the Astronomy Picture of the Day. In fact, this website is one of the most popular websites across all federal agencies.</p>\r\n\t\t</>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport ErrorFormat from \"../models/ErrorFormat\";\r\n\r\ntype ChangeImageFormProps = {\r\n\tupdateAPODImage: React.Dispatch<React.SetStateAction<boolean>>;\r\n\tsetError: React.Dispatch<React.SetStateAction<ErrorFormat>>;\r\n};\r\n\r\nexport default function ChangeImageForm({ updateAPODImage, setError }: ChangeImageFormProps) {\r\n\tconst dateChanged = (event: any) => {\r\n\t\tif (new Date(event.target.value) > new Date()) {\r\n\t\t\tsetError({ title: \"Error\", explanation: \"Range error\", occurred: true })\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst date: string = moment(new Date(event.target.value)).format(\"YYYY-MM-DD\");\r\n\t\tconst current: string = moment(new Date()).format(\"YYYY-MM-DD\");\r\n\t\tdate !== current ?\r\n\t\t\tlocalStorage.setItem(\"apod_day\", date) :\r\n\t\t\tlocalStorage.setItem(\"apod_day\", \"\");\r\n\t\tupdateAPODImage(prevState => !prevState);\r\n\t};\r\n\r\n\tconst getDateTimeValue = (): string => {\r\n\t\tconst storedDate: string | null = localStorage.getItem(\"apod_day\");\r\n\t\treturn storedDate ? storedDate : moment(new Date()).format(\"YYYY-MM-DD\");\r\n\t};\r\n\treturn (\r\n\t\t<Form>\r\n\t\t\t<Form.Group controlId=\"formBasicEmail\">\r\n\t\t\t\t<Form.Label>Astronomy Picture of the Day</Form.Label>\r\n\t\t\t\t<Form.Control type=\"date\" onChange={dateChanged} defaultValue={getDateTimeValue()} placeholder=\"Enter Astronomy Picture of the Day\"/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\tAstronomy Picture of the Day image will update\r\n\t\t\t\t</Form.Text>\r\n\t\t\t</Form.Group>\r\n\t\t</Form>\r\n\t);\r\n}\r\n","import Alert from \"react-bootstrap/Alert\";\r\nimport React from \"react\";\r\nimport ErrorFormat from \"../models/ErrorFormat\";\r\n\r\ntype AlertDismissibleProps = {\r\n\terror: ErrorFormat;\r\n\tsetError: React.Dispatch<ErrorFormat>;\r\n}\r\n\r\nexport default function AlertDismissible({ error, setError }: AlertDismissibleProps) {\r\n\tif (error.occurred) {\r\n\t\treturn (\r\n\t\t\t<Alert variant=\"danger\" onClose={() => setError({ ...error, occurred: false })} dismissible>\r\n\t\t\t\t<Alert.Heading>{error.title}</Alert.Heading>\r\n\t\t\t\t<p>{error.explanation}</p>\r\n\t\t\t</Alert>\r\n\t\t);\r\n\t}\r\n\treturn <></>\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport config from \"../constatnts/nasa\"\nimport ImageFormat from \"../models/ImageFormat\";\nimport ErrorFormat from \"../models/ErrorFormat\";\nimport {loadImage} from \"../services/nasaService\";\n\nimport ImageAPOD from \"../components/ImageAPOD\"\nimport InfoComponent from \"../components/InfoComponent\";\nimport ChangeImageForm from \"../components/ChangeImageForm\";\nimport AlertDismissible from \"../components/AlertDismissable\";\n\nfunction MainPage() {\n  const [image, setImage] = useState<ImageFormat>({\n    date: new Date(),\n    explanation: \"\",\n    hdurl: \"\",\n    media_type: \"image\",\n    service_version: \"\",\n    title: \"\",\n    url: config.ERROR_IMAGE\n  });\n  const [needUpdate, update] = useState<boolean>(false);\n  const [error, setError] = useState<ErrorFormat>({ explanation: \"\", title: \"\", occurred: false });\n  useEffect(() => {\n    loadImage(setImage).then(() => {\n      setError({ explanation: \"\", title: \"\", occurred: false });\n    }).catch((result: string) => {\n      setImage({ ...image, title: \"Error\", explanation: result.toString(), media_type: \"image\", url: config.ERROR_IMAGE })\n      setError({ explanation: result.toString(), title: \"Error\", occurred: true });\n    })\n  }, [needUpdate]);\n\n  return (\n    <Container>\n      <Row className=\"row__centered\">\n        <Col sm={8}>\n          <ImageAPOD image={image} />\n        </Col>\n        <Col sm={4}>\n          <InfoComponent />\n          <AlertDismissible error={error} setError={setError} />\n          <ChangeImageForm setError={setError} updateAPODImage={update} />\n          <p>Other pictures u can find <Link to=\"/pictures\">here</Link>.</p>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default MainPage;\n","import React, {useEffect, useState} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport {getRecentAPODImage} from \"../services/nasaService\";\r\nimport ImageFormat from \"../models/ImageFormat\";\r\nimport ErrorFormat from \"../models/ErrorFormat\";\r\nimport AlertDismissible from \"../components/AlertDismissable\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ntype PicturesListProps = {\r\n\timages: ImageFormat[];\r\n}\r\n\r\nfunction PicturesList({ images }: PicturesListProps) {\r\n\tconst imagesList = images.map((image: ImageFormat) => {\r\n\t\treturn (\r\n\t\t\t<Col sm={4}>\r\n\t\t\t\t<Card className=\"mb-3\">\r\n\t\t\t\t\t{ image.media_type === \"image\" ?\r\n\t\t\t\t\t\t<Card.Img variant=\"top\" className=\"pictures__image\" src={image.url} /> :\r\n\t\t\t\t\t\t<iframe\r\n\t\t\t\t\t\t\ttitle={image.title}\r\n\t\t\t\t\t\t\twidth=\"560\"\r\n\t\t\t\t\t\t\theight=\"315\"\r\n\t\t\t\t\t\t\tsrc={image.url}\r\n\t\t\t\t\t\t\tframeBorder=\"0\"\r\n\t\t\t\t\t\t\tclassName=\"pictures__image\"\r\n\t\t\t\t\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n\t\t\t\t\t\t\tallowFullScreen\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t<Card.Title>{image.title}</Card.Title>\r\n\t\t\t\t\t\t<Card.Text className=\"pictures__text\">{image.explanation}</Card.Text>\r\n\t\t\t\t\t</Card.Body>\r\n\t\t\t\t</Card>\r\n\t\t\t</Col>\r\n\t\t);\r\n\t});\r\n\treturn (\r\n\t\t<Row className=\"pt-5\">\r\n\t\t\t{ imagesList }\r\n\t\t</Row>\r\n\t)\r\n}\r\n\r\nexport default function PicturesPage() {\r\n\tconst [pictures, setPictures] = useState<ImageFormat[]>([]);\r\n\tconst [error, setError] = useState<ErrorFormat>({ explanation: \"\", occurred: false, title: \"\" });\r\n\r\n\tuseEffect(() => {\r\n\t\tconst dates = new Array(6)\r\n\t\t\t.fill(new Date())\r\n\t\t\t.map((date: Date, index) => new Date(moment(date).subtract(index + 1, \"day\").format(\"YYYY-MM-DD\")))\r\n\t\tconst loadPictures = (): Promise<ImageFormat[]> => {\r\n\t\t\tconst imagesList: Promise<ImageFormat>[] = [];\r\n\t\t\tfor (const date of dates) {\r\n\t\t\t\timagesList.push(getRecentAPODImage(date, false));\r\n\t\t\t}\r\n\t\t\treturn Promise.all(imagesList);\r\n\t\t}\r\n\t\tloadPictures().then((result: ImageFormat[]) => setPictures(result)).catch(() => {\r\n\t\t\tsetError({ title: \"Error\", explanation: \"Error during rendering\", occurred: true });\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Container className=\"pt-5\">\r\n\t\t\t<h1 className=\"pictures__topic\">Astronomy Picture of the Day pictures</h1>\r\n\t\t\t<AlertDismissible error={error} setError={setError} />\r\n\t\t\t<PicturesList images={pictures} />\r\n\t\t\t<Link to=\"/\"><Button className=\"pictures__back-button mb-5\">Back</Button></Link>\r\n\t\t</Container>\r\n\t);\r\n}\r\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport MainPage from \"./pages/MainPage\";\nimport PicturesPage from \"./pages/PicturesPage\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/pictures\">\n            <PicturesPage />\n          </Route>\n          <Route path=\"/\">\n            <MainPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}